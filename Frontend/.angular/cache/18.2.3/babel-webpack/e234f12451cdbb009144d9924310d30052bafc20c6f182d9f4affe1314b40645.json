{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/service/auth/auth-service.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class LoginComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.username = \"\";\n    this.password = \"\";\n  }\n  login() {\n    const credentials = {\n      username: this.username,\n      password: this.password\n    };\n    this.authService.login(credentials).subscribe(response => {\n      console.log('Login successful', response);\n      // Perform any desired actions upon successful login\n      this.router.navigate(['/dashboard']);\n    }, error => {\n      console.error('Login failed', error);\n      // Handle login error\n    });\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 14,\n    vars: 2,\n    consts: [[1, \"login-container\"], [3, \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"username\"], [\"type\", \"text\", \"id\", \"username\", \"name\", \"username\", \"required\", \"\", 3, \"ngModelChange\", \"ngModel\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"name\", \"password\", \"required\", \"\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"submit\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.login();\n        });\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Username:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"input\", 4);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_7_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.username, $event) || (ctx.username = $event);\n          return $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"Password:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"input\", 6);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_11_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.password, $event) || (ctx.password = $event);\n          return $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"button\", 7);\n        i0.ɵɵtext(13, \"Login\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.username);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.password);\n      }\n    },\n    dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["LoginComponent","constructor","authService","router","username","password","login","credentials","subscribe","response","console","log","navigate","error","_","i0","ɵɵdirectiveInject","i1","AuthService","i2","Router","_2","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","LoginComponent_Template_form_ngSubmit_3_listener","ɵɵtwoWayListener","LoginComponent_Template_input_ngModelChange_7_listener","$event","ɵɵtwoWayBindingSet","LoginComponent_Template_input_ngModelChange_11_listener","ɵɵadvance","ɵɵtwoWayProperty"],"sources":["/Users/ayubrai/Desktop/projects/LibraryProject/Frontend/src/app/login/login.component.ts","/Users/ayubrai/Desktop/projects/LibraryProject/Frontend/src/app/login/login.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/service/auth/auth-service.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  username: string = \"\";\n  password: string = \"\";\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n\n\n  login(): void {\n    const credentials = {\n      username: this.username,\n      password: this.password\n    };\n  \n    this.authService.login(credentials).subscribe(\n      response => {\n        console.log('Login successful', response);\n        // Perform any desired actions upon successful login\n        this.router.navigate(['/dashboard']);\n      },\n      error => {\n        console.error('Login failed', error);\n        // Handle login error\n      }\n    );\n  }\n\n}\n","<div class=\"login-container\">\n  <h2>Login</h2>\n  <form (ngSubmit)=\"login()\">\n    <div class=\"form-group\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\" [(ngModel)]=\"username\" required>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" name=\"password\" [(ngModel)]=\"password\" required>\n    </div>\n    <button type=\"submit\">Login</button>\n  </form>\n</div>\n"],"mappings":";;;;AAUA,OAAM,MAAOA,cAAc;EAIzBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAH5D,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,QAAQ,GAAW,EAAE;EAEmD;EAIxEC,KAAKA,CAAA;IACH,MAAMC,WAAW,GAAG;MAClBH,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,QAAQ,EAAE,IAAI,CAACA;KAChB;IAED,IAAI,CAACH,WAAW,CAACI,KAAK,CAACC,WAAW,CAAC,CAACC,SAAS,CAC3CC,QAAQ,IAAG;MACTC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,QAAQ,CAAC;MACzC;MACA,IAAI,CAACN,MAAM,CAACS,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;IACtC,CAAC,EACDC,KAAK,IAAG;MACNH,OAAO,CAACG,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC;IACF,CAAC,CACF;EACH;EAAC,QAAAC,CAAA,G;qCAzBUd,cAAc,EAAAe,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAdrB,cAAc;IAAAsB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCTzBb,EADF,CAAAe,cAAA,aAA6B,SACvB;QAAAf,EAAA,CAAAgB,MAAA,YAAK;QAAAhB,EAAA,CAAAiB,YAAA,EAAK;QACdjB,EAAA,CAAAe,cAAA,cAA2B;QAArBf,EAAA,CAAAkB,UAAA,sBAAAC,iDAAA;UAAA,OAAYL,GAAA,CAAAvB,KAAA,EAAO;QAAA,EAAC;QAEtBS,EADF,CAAAe,cAAA,aAAwB,eACA;QAAAf,EAAA,CAAAgB,MAAA,gBAAS;QAAAhB,EAAA,CAAAiB,YAAA,EAAQ;QACvCjB,EAAA,CAAAe,cAAA,eAAiF;QAAhCf,EAAA,CAAAoB,gBAAA,2BAAAC,uDAAAC,MAAA;UAAAtB,EAAA,CAAAuB,kBAAA,CAAAT,GAAA,CAAAzB,QAAA,EAAAiC,MAAA,MAAAR,GAAA,CAAAzB,QAAA,GAAAiC,MAAA;UAAA,OAAAA,MAAA;QAAA,EAAsB;QACzEtB,EADE,CAAAiB,YAAA,EAAiF,EAC7E;QAEJjB,EADF,CAAAe,cAAA,aAAwB,eACA;QAAAf,EAAA,CAAAgB,MAAA,iBAAS;QAAAhB,EAAA,CAAAiB,YAAA,EAAQ;QACvCjB,EAAA,CAAAe,cAAA,gBAAqF;QAAhCf,EAAA,CAAAoB,gBAAA,2BAAAI,wDAAAF,MAAA;UAAAtB,EAAA,CAAAuB,kBAAA,CAAAT,GAAA,CAAAxB,QAAA,EAAAgC,MAAA,MAAAR,GAAA,CAAAxB,QAAA,GAAAgC,MAAA;UAAA,OAAAA,MAAA;QAAA,EAAsB;QAC7EtB,EADE,CAAAiB,YAAA,EAAqF,EACjF;QACNjB,EAAA,CAAAe,cAAA,iBAAsB;QAAAf,EAAA,CAAAgB,MAAA,aAAK;QAE/BhB,EAF+B,CAAAiB,YAAA,EAAS,EAC/B,EACH;;;QARiDjB,EAAA,CAAAyB,SAAA,GAAsB;QAAtBzB,EAAA,CAAA0B,gBAAA,YAAAZ,GAAA,CAAAzB,QAAA,CAAsB;QAIlBW,EAAA,CAAAyB,SAAA,GAAsB;QAAtBzB,EAAA,CAAA0B,gBAAA,YAAAZ,GAAA,CAAAxB,QAAA,CAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}